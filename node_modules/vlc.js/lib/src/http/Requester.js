"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module Requester
 * @description This module handles ALL the HTTP interactions with VLCs' HTTP server. All the
 *     commands can be found here.
 * @author dylhack
 */
var buffer_1 = require("buffer");
var http = __importStar(require("http"));
var classes_1 = require("./classes/");
/**
 * @param {VLCCredentials} details
 * @param {VLCCommand} vlcCommand
 * @param {String[]} query
 * @returns {Promise<VLCStatus>}
 */
function command(details, vlcCommand, query) {
    var address = new URL("http://" + details.address + ":" + details.port + "/requests/status.json?command=" + vlcCommand);
    if (query)
        query.forEach(function (queue) {
            if (queue.includes('=')) {
                var key = queue.split('=')[0];
                var value = queue.split('=')[1];
                address.searchParams.append(key, value);
            }
            else
                address.searchParams.append(queue, '');
        });
    return new Promise(function (resolve, reject) {
        _request(address, details)
            .then(function (vlcRequest) {
            if (vlcRequest.data.includes('<title>Error loading /requests/status.json</title>')
                || vlcRequest.data.includes('<title>Client error</title>')) {
                reject(new classes_1.VLCError(vlcRequest));
            }
            else {
                resolve(new classes_1.VLCStatus(vlcRequest));
            }
        })
            .catch(reject);
    });
}
exports.command = command;
/**
 * @param {VLCCredentials} details
 * @returns {Promise<VLCStatus>}
 */
function getStatus(details) {
    return new Promise(function (resolve, reject) {
        var address = new URL("http://" + details.address + ":" + details.port + "/requests/status.json");
        _request(address, details)
            .then(function (vlcRequest) {
            if (vlcRequest.data.includes('<title>Error loading /requests/status.json</title>')
                || vlcRequest.data.includes('<title>Client error</title>')) {
                reject(new classes_1.VLCError(vlcRequest));
            }
            resolve(new classes_1.VLCStatus(vlcRequest));
        })
            .catch(reject);
    });
}
exports.getStatus = getStatus;
/**
 * @param {VLCCredentials} details
 * @returns {Promise<VLCPlaylist>}
 */
function getPlaylist(details) {
    return new Promise(function (resolve, reject) {
        var address = new URL("http://" + details.address + ":" + details.port + "/requests/playlist.json");
        _request(address, details)
            .then(function (vlcRequest) {
            if (vlcRequest.data.includes('<title>Error loading /requests/playlist.json</title>')
                || vlcRequest.data.includes('<title>Client error</title>')) {
                reject(new classes_1.VLCError(vlcRequest));
            }
            resolve(new classes_1.VLCPlaylist(vlcRequest));
        })
            .catch(reject);
    });
}
exports.getPlaylist = getPlaylist;
/**
 * @param {URL} address
 * @param {VLCCredentials} details
 * @returns {VLCRequest}
 * @private
 */
function _request(address, details) {
    return new Promise(function (resolve, reject) {
        var data = '';
        var basicAuth = buffer_1.Buffer.from(":" + details.password)
            .toString('base64');
        var req = http.get(address.toString(), {
            headers: {
                'Authorization': "Basic " + basicAuth
            }
        });
        req.on('response', function (res) {
            res.on('data', function (chunk) { return data += chunk; });
            res.on('end', function () {
                var vlcRequest = new classes_1.VLCRequest(req, res, buffer_1.Buffer.from(data));
                resolve(vlcRequest);
            });
        });
        req.on('error', reject);
    });
}
exports._request = _request;
